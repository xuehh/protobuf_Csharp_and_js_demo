// Generated by protoc-gen-cs, Version=2.4.1.555, Culture=neutral, PublicKeyToken=17b3b1f090c3ea48.  DO NOT EDIT!
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace ProtoBufDemo {
  
  namespace Proto {
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static partial class PersonTest {
    
      #region Extension registration
      public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
      }
      #endregion
      #region Static variables
      internal static pbd::MessageDescriptor internal__static_ProtoBufDemo_PersonTest__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::ProtoBufDemo.PersonTest, global::ProtoBufDemo.PersonTest.Builder> internal__static_ProtoBufDemo_PersonTest__FieldAccessorTable;
      #endregion
      #region Descriptor
      public static pbd::FileDescriptor Descriptor {
        get { return descriptor; }
      }
      private static pbd::FileDescriptor descriptor;
      
      static PersonTest() {
        byte[] descriptorData = global::System.Convert.FromBase64String(
            string.Concat(
              "ChBQZXJzb25UZXN0LnByb3RvEgxQcm90b0J1ZkRlbW8iXwoKUGVyc29uVGVz", 
              "dBIMCgRuYW1lGAEgAigJEgoKAmlkGAIgAigFEg0KBWVtYWlsGAMgASgJEgwK", 
            "BHNpemUYBCACKAkSCwoDYnVmGAUgAigMEg0KBWlzaW1nGAYgAigI"));
        pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
          descriptor = root;
          internal__static_ProtoBufDemo_PersonTest__Descriptor = Descriptor.MessageTypes[0];
          internal__static_ProtoBufDemo_PersonTest__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::ProtoBufDemo.PersonTest, global::ProtoBufDemo.PersonTest.Builder>(internal__static_ProtoBufDemo_PersonTest__Descriptor,
                  new string[] { "Name", "Id", "Email", "Size", "Buf", "Isimg", });
          return null;
        };
        pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
            new pbd::FileDescriptor[] {
            }, assigner);
      }
      #endregion
      
    }
  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PersonTest : pb::GeneratedMessage<PersonTest, PersonTest.Builder> {
    private PersonTest() { }
    private static readonly PersonTest defaultInstance = new PersonTest().MakeReadOnly();
    private static readonly string[] _personTestFieldNames = new string[] { "buf", "email", "id", "isimg", "name", "size" };
    private static readonly uint[] _personTestFieldTags = new uint[] { 42, 26, 16, 48, 10, 34 };
    public static PersonTest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override PersonTest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override PersonTest ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::ProtoBufDemo.Proto.PersonTest.internal__static_ProtoBufDemo_PersonTest__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<PersonTest, PersonTest.Builder> InternalFieldAccessors {
      get { return global::ProtoBufDemo.Proto.PersonTest.internal__static_ProtoBufDemo_PersonTest__FieldAccessorTable; }
    }
    
    public const int NameFieldNumber = 1;
    private bool hasName;
    private string name_ = "";
    public bool HasName {
      get { return hasName; }
    }
    public string Name {
      get { return name_; }
    }
    
    public const int IdFieldNumber = 2;
    private bool hasId;
    private int id_;
    public bool HasId {
      get { return hasId; }
    }
    public int Id {
      get { return id_; }
    }
    
    public const int EmailFieldNumber = 3;
    private bool hasEmail;
    private string email_ = "";
    public bool HasEmail {
      get { return hasEmail; }
    }
    public string Email {
      get { return email_; }
    }
    
    public const int SizeFieldNumber = 4;
    private bool hasSize;
    private string size_ = "";
    public bool HasSize {
      get { return hasSize; }
    }
    public string Size {
      get { return size_; }
    }
    
    public const int BufFieldNumber = 5;
    private bool hasBuf;
    private pb::ByteString buf_ = pb::ByteString.Empty;
    public bool HasBuf {
      get { return hasBuf; }
    }
    public pb::ByteString Buf {
      get { return buf_; }
    }
    
    public const int IsimgFieldNumber = 6;
    private bool hasIsimg;
    private bool isimg_;
    public bool HasIsimg {
      get { return hasIsimg; }
    }
    public bool Isimg {
      get { return isimg_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasName) return false;
        if (!hasId) return false;
        if (!hasSize) return false;
        if (!hasBuf) return false;
        if (!hasIsimg) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _personTestFieldNames;
      if (hasName) {
        output.WriteString(1, field_names[4], Name);
      }
      if (hasId) {
        output.WriteInt32(2, field_names[2], Id);
      }
      if (hasEmail) {
        output.WriteString(3, field_names[1], Email);
      }
      if (hasSize) {
        output.WriteString(4, field_names[5], Size);
      }
      if (hasBuf) {
        output.WriteBytes(5, field_names[0], Buf);
      }
      if (hasIsimg) {
        output.WriteBool(6, field_names[3], Isimg);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasName) {
        size += pb::CodedOutputStream.ComputeStringSize(1, Name);
      }
      if (hasId) {
        size += pb::CodedOutputStream.ComputeInt32Size(2, Id);
      }
      if (hasEmail) {
        size += pb::CodedOutputStream.ComputeStringSize(3, Email);
      }
      if (hasSize) {
        size += pb::CodedOutputStream.ComputeStringSize(4, Size);
      }
      if (hasBuf) {
        size += pb::CodedOutputStream.ComputeBytesSize(5, Buf);
      }
      if (hasIsimg) {
        size += pb::CodedOutputStream.ComputeBoolSize(6, Isimg);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static PersonTest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PersonTest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PersonTest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PersonTest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PersonTest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PersonTest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static PersonTest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static PersonTest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static PersonTest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PersonTest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private PersonTest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(PersonTest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<PersonTest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(PersonTest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private PersonTest result;
      
      private PersonTest PrepareBuilder() {
        if (resultIsReadOnly) {
          PersonTest original = result;
          result = new PersonTest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override PersonTest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::ProtoBufDemo.PersonTest.Descriptor; }
      }
      
      public override PersonTest DefaultInstanceForType {
        get { return global::ProtoBufDemo.PersonTest.DefaultInstance; }
      }
      
      public override PersonTest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is PersonTest) {
          return MergeFrom((PersonTest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(PersonTest other) {
        if (other == global::ProtoBufDemo.PersonTest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasName) {
          Name = other.Name;
        }
        if (other.HasId) {
          Id = other.Id;
        }
        if (other.HasEmail) {
          Email = other.Email;
        }
        if (other.HasSize) {
          Size = other.Size;
        }
        if (other.HasBuf) {
          Buf = other.Buf;
        }
        if (other.HasIsimg) {
          Isimg = other.Isimg;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_personTestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _personTestFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasName = input.ReadString(ref result.name_);
              break;
            }
            case 16: {
              result.hasId = input.ReadInt32(ref result.id_);
              break;
            }
            case 26: {
              result.hasEmail = input.ReadString(ref result.email_);
              break;
            }
            case 34: {
              result.hasSize = input.ReadString(ref result.size_);
              break;
            }
            case 42: {
              result.hasBuf = input.ReadBytes(ref result.buf_);
              break;
            }
            case 48: {
              result.hasIsimg = input.ReadBool(ref result.isimg_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasName {
        get { return result.hasName; }
      }
      public string Name {
        get { return result.Name; }
        set { SetName(value); }
      }
      public Builder SetName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasName = true;
        result.name_ = value;
        return this;
      }
      public Builder ClearName() {
        PrepareBuilder();
        result.hasName = false;
        result.name_ = "";
        return this;
      }
      
      public bool HasId {
        get { return result.hasId; }
      }
      public int Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(int value) {
        PrepareBuilder();
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.hasId = false;
        result.id_ = 0;
        return this;
      }
      
      public bool HasEmail {
        get { return result.hasEmail; }
      }
      public string Email {
        get { return result.Email; }
        set { SetEmail(value); }
      }
      public Builder SetEmail(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasEmail = true;
        result.email_ = value;
        return this;
      }
      public Builder ClearEmail() {
        PrepareBuilder();
        result.hasEmail = false;
        result.email_ = "";
        return this;
      }
      
      public bool HasSize {
        get { return result.hasSize; }
      }
      public string Size {
        get { return result.Size; }
        set { SetSize(value); }
      }
      public Builder SetSize(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSize = true;
        result.size_ = value;
        return this;
      }
      public Builder ClearSize() {
        PrepareBuilder();
        result.hasSize = false;
        result.size_ = "";
        return this;
      }
      
      public bool HasBuf {
        get { return result.hasBuf; }
      }
      public pb::ByteString Buf {
        get { return result.Buf; }
        set { SetBuf(value); }
      }
      public Builder SetBuf(pb::ByteString value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBuf = true;
        result.buf_ = value;
        return this;
      }
      public Builder ClearBuf() {
        PrepareBuilder();
        result.hasBuf = false;
        result.buf_ = pb::ByteString.Empty;
        return this;
      }
      
      public bool HasIsimg {
        get { return result.hasIsimg; }
      }
      public bool Isimg {
        get { return result.Isimg; }
        set { SetIsimg(value); }
      }
      public Builder SetIsimg(bool value) {
        PrepareBuilder();
        result.hasIsimg = true;
        result.isimg_ = value;
        return this;
      }
      public Builder ClearIsimg() {
        PrepareBuilder();
        result.hasIsimg = false;
        result.isimg_ = false;
        return this;
      }
    }
    static PersonTest() {
      object.ReferenceEquals(global::ProtoBufDemo.Proto.PersonTest.Descriptor, null);
    }
  }
  
  #endregion
  
}

#endregion Designer generated code
